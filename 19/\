local function cloneTable(t)
  return { table.unpack(t) }
end

local function expandRule(rules, rule, t)
  t = t or {''}

  if rule:find('"') then
    for i,_ in ipairs(t) do
      t[i] = t[i] .. rule:match('"([^"]+)"')
    end
    return t
  end

  local pos = rule:find('|')
  if pos then
    local lhs = rule:sub(1, pos - 1)
    local rhs = rule:sub(pos + 1)
    local rhsT = cloneTable(t)

    expandRule(rules, lhs, t)
    expandRule(rules, rhs, rhsT)

    for _,v in ipairs(rhsT) do
      table.insert(t, v)
    end

    return t
  end

  for n in rule:gmatch('%d+') do
    expandRule(rules, rules[tonumber(n)], t)
  end

  return t
end

-- local function testMessage(rules, rule, msg, i)
--   i = i or 1
--   print('current', msg, i, msg:sub(i, i), rule)

--   if rule:find('"') then
--     local res = msg:sub(i, i) == rule:match('"([^"]+)"')
--     print(res)
--     if res then return true, i + 1
--     else return false, i end
--   end

--   local pos = rule:find('|')
--   if pos then
--     local lhs = rule:sub(1, pos - 1)
--     local rhs = rule:sub(pos + 2)

--     local lhsR, lhsI = testMessage(rules, lhs, msg, i)
--     if lhsR then return true, lhsI end

--     local rhsR, rhsI = testMessage(rules, rhs, msg, i)
--     if rhsR then return true, rhsI end

--     return false, i
--   end

--   for n in rule:gmatch('%d+') do
--     local res, ni = testMessage(rules, rules[tonumber(n)], msg, i)
--     if not res then return false, i
--     else i = ni end
--   end

--   return true, i
-- end

local rules = {}

local file = io.read('a')

local pos, npos = file:find('\n\n')
local rulesStr = file:sub(0, pos - 1)
local messagesStr = file:sub(npos + 1)

for i, rule in rulesStr:gmatch('(%d+):%s+([^\n]+)') do
  rules[tonumber(i)] = rule
end

local count = 0

local rule42 = expandRule(rules, rules[42])
local rule31 = expandRule(rules, rules[31])

for msg in messagesStr:gmatch('[^\n]+') do
  local count42 = 0
  local prefix = msg:sub(1, 5)

  local isPrefixBy42 = true
  while isPrefixBy42 do
    for _,v in pairs(rules42) do
    end
  end
end
